// Numbers
let 1 = \f x. f x;
let 3 = \f x. f (f (f x));
let 6 = \f x. f (f (f (f (f (f x)))));

// Arithmetic operations
let mul = \m n f. m (n f);
let pred = \n f x. n (\g h. h (g f)) (\u. x) (\u. u);
let sub = \m n. n pred m;

// Boolean values
let true = \x y. x;
let false = \x y. y;

// Predicates
let and = \p q. p q p;
let cond = \p then else. p then else;
let is_zero = \n. n (\x. false) true;
let is_equal = \m n. and (is_zero (sub m n)) (is_zero (sub n m));

// Fixed point combinator
let Y = \f. (\x. f (x x)) (\x. f (x x));

// Factorial function
let factorial_impl = \f n.
    cond (is_zero n)
        1
        (mul n (f (pred n)));
let factorial = Y factorial_impl;

// Go!
is_equal (factorial 3) 6;

// vim: set ts=4 sw=4 et:
