{"version":3,"sources":["webpack:///./src/clumsy_web.js"],"names":["TextEncoder","self","require","cachedEncoder","cachedUint8Memory","getUint8Memory","buffer","wasm","memory","Uint8Array","passStringToWasm","arg","buf","encode","ptr","__wbindgen_malloc","length","set","cachedUint32Memory","getUint32Memory","Uint32Array","cachedGlobalArgumentPtr","globalArgumentPtr","__wbindgen_global_argument_ptr","setGlobalArgument","i","idx","TextDecoder","cachedDecoder","getStringFromWasm","len","decode","slice","getGlobalArgument","evaluate","arg0","ptr0","len0","ret","realRet","__wbindgen_free","slab","slab_next","addHeapObject","obj","push","next","cnt","stack","getObject","val","__wbindgen_object_clone_ref","dropRef","__wbindgen_object_drop_ref","__wbindgen_string_new","p","l","__wbindgen_number_new","__wbindgen_number_get","n","invalid","__wbindgen_undefined_new","undefined","__wbindgen_null_new","__wbindgen_is_null","__wbindgen_is_undefined","__wbindgen_boolean_new","v","__wbindgen_boolean_get","__wbindgen_symbol_new","a","Symbol","__wbindgen_is_symbol","__wbindgen_string_get","len_ptr","__wbindgen_throw","Error"],"mappings":"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","file":"0.bundle.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './clumsy_web_bg';\n\nconst TextEncoder = typeof self === 'object' && self.TextEncoder\n    ? self.TextEncoder\n    : require('util').TextEncoder;\n\nlet cachedEncoder = new TextEncoder('utf-8');\n\nlet cachedUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachedUint8Memory === null ||\n        cachedUint8Memory.buffer !== wasm.memory.buffer)\n        cachedUint8Memory = new Uint8Array(wasm.memory.buffer);\n    return cachedUint8Memory;\n}\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    return [ptr, buf.length];\n}\n\nlet cachedUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachedUint32Memory === null ||\n        cachedUint32Memory.buffer !== wasm.memory.buffer)\n        cachedUint32Memory = new Uint32Array(wasm.memory.buffer);\n    return cachedUint32Memory;\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null)\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    return cachedGlobalArgumentPtr;\n}\n\nfunction setGlobalArgument(arg, i) {\n    const idx = globalArgumentPtr() / 4 + i;\n    getUint32Memory()[idx] = arg;\n}\n\nconst TextDecoder = typeof self === 'object' && self.TextDecoder\n    ? self.TextDecoder\n    : require('util').TextDecoder;\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().slice(ptr, ptr + len));\n}\n\nfunction getGlobalArgument(arg) {\n    const idx = globalArgumentPtr() / 4 + arg;\n    return getUint32Memory()[idx];\n}\n\nexport function evaluate(arg0) {\n    const [ptr0, len0] = passStringToWasm(arg0);\n    setGlobalArgument(len0, 0);\n    try {\n        const ret = wasm.evaluate(ptr0);\n        const len = getGlobalArgument(0);\n        const realRet = getStringFromWasm(ret, len);\n        wasm.__wbindgen_free(ret, len * 1);\n        return realRet;\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n    }\n}\n\nlet slab = [];\n\nlet slab_next = 0;\n\nfunction addHeapObject(obj) {\n    if (slab_next === slab.length)\n        slab.push(slab.length + 1);\n    const idx = slab_next;\n    const next = slab[idx];\n\n    slab_next = next;\n\n    slab[idx] = { obj, cnt: 1 };\n    return idx << 1;\n}\n\nlet stack = [];\n\nfunction getObject(idx) {\n    if ((idx & 1) === 1) {\n        return stack[idx >> 1];\n    } else {\n        const val = slab[idx >> 1];\n\n    return val.obj;\n\n    }\n}\n\nexport function __wbindgen_object_clone_ref(idx) {\n    // If this object is on the stack promote it to the heap.\n    if ((idx & 1) === 1)\n        return addHeapObject(getObject(idx));\n\n    // Otherwise if the object is on the heap just bump the\n    // refcount and move on\n    const val = slab[idx >> 1];\n    val.cnt += 1;\n    return idx;\n}\n\nfunction dropRef(idx) {\n\n    let obj = slab[idx >> 1];\n\n    obj.cnt -= 1;\n    if (obj.cnt > 0)\n        return;\n\n    // If we hit 0 then free up our space in the slab\n    slab[idx >> 1] = slab_next;\n    slab_next = idx >> 1;\n}\n\nexport function __wbindgen_object_drop_ref(i) { dropRef(i); }\n\nexport function __wbindgen_string_new(p, l) {\n    return addHeapObject(getStringFromWasm(p, l));\n}\n\nexport function __wbindgen_number_new(i) { return addHeapObject(i); }\n\nexport function __wbindgen_number_get(n, invalid) {\n    let obj = getObject(n);\n    if (typeof(obj) === 'number')\n        return obj;\n    getUint8Memory()[invalid] = 1;\n    return 0;\n}\n\nexport function __wbindgen_undefined_new() { return addHeapObject(undefined); }\n\nexport function __wbindgen_null_new() {\n    return addHeapObject(null);\n}\n\nexport function __wbindgen_is_null(idx) {\n    return getObject(idx) === null ? 1 : 0;\n}\n\nexport function __wbindgen_is_undefined(idx) {\n    return getObject(idx) === undefined ? 1 : 0;\n}\n\nexport function __wbindgen_boolean_new(v) {\n    return addHeapObject(v === 1);\n}\n\nexport function __wbindgen_boolean_get(i) {\n    let v = getObject(i);\n    if (typeof(v) === 'boolean') {\n        return v ? 1 : 0;\n    } else {\n        return 2;\n    }\n}\n\nexport function __wbindgen_symbol_new(ptr, len) {\n    let a;\n    if (ptr === 0) {\n        a = Symbol();\n    } else {\n        a = Symbol(getStringFromWasm(ptr, len));\n    }\n    return addHeapObject(a);\n}\n\nexport function __wbindgen_is_symbol(i) {\n    return typeof(getObject(i)) === 'symbol' ? 1 : 0;\n}\n\nexport function __wbindgen_string_get(i, len_ptr) {\n    let obj = getObject(i);\n    if (typeof(obj) !== 'string')\n        return 0;\n    const [ptr, len] = passStringToWasm(obj);\n    getUint32Memory()[len_ptr / 4] = len;\n    return ptr;\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}