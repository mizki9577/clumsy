{"version":3,"sources":["webpack:///./src/clumsy_web.js"],"names":["TextEncoder","self","require","cachedEncoder","cachegetUint8Memory","getUint8Memory","buffer","wasm","memory","Uint8Array","passStringToWasm","arg","buf","encode","ptr","__wbindgen_malloc","length","set","TextDecoder","cachedDecoder","getStringFromWasm","len","decode","subarray","cachedGlobalArgumentPtr","globalArgumentPtr","__wbindgen_global_argument_ptr","cachegetUint32Memory","getUint32Memory","Uint32Array","evaluate","arg0","ptr0","len0","retptr","mem","realRet","__wbindgen_free","slab","slab_next","addHeapObject","obj","push","idx","next","cnt","stack","getObject","val","__wbindgen_object_clone_ref","dropRef","__wbindgen_object_drop_ref","i","__wbindgen_string_new","p","l","__wbindgen_number_new","__wbindgen_number_get","n","invalid","__wbindgen_undefined_new","undefined","__wbindgen_null_new","__wbindgen_is_null","__wbindgen_is_undefined","__wbindgen_boolean_new","v","__wbindgen_boolean_get","__wbindgen_symbol_new","a","Symbol","__wbindgen_is_symbol","__wbindgen_string_get","len_ptr","__wbindgen_throw","Error"],"mappings":"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","file":"0.bundle.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './clumsy_web_bg';\n\nconst TextEncoder = typeof self === 'object' && self.TextEncoder\n    ? self.TextEncoder\n    : require('util').TextEncoder;\n\nlet cachedEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null ||\n        cachegetUint8Memory.buffer !== wasm.memory.buffer)\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    return cachegetUint8Memory;\n}\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    return [ptr, buf.length];\n}\n\nconst TextDecoder = typeof self === 'object' && self.TextDecoder\n    ? self.TextDecoder\n    : require('util').TextDecoder;\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null)\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null ||\n        cachegetUint32Memory.buffer !== wasm.memory.buffer)\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    return cachegetUint32Memory;\n}\n\nexport function evaluate(arg0) {\n    const [ptr0, len0] = passStringToWasm(arg0);\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.evaluate(retptr, ptr0, len0);\n        const mem = getUint32Memory();\n        const ptr = mem[retptr / 4];\n        const len = mem[retptr / 4 + 1];\n        const realRet = getStringFromWasm(ptr, len);\n        wasm.__wbindgen_free(ptr, len * 1);\n        return realRet;\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n    }\n}\n\nlet slab = [];\n\nlet slab_next = 0;\n\nfunction addHeapObject(obj) {\n    if (slab_next === slab.length)\n        slab.push(slab.length + 1);\n    const idx = slab_next;\n    const next = slab[idx];\n\n    slab_next = next;\n\n    slab[idx] = { obj, cnt: 1 };\n    return idx << 1;\n}\n\nlet stack = [];\n\nfunction getObject(idx) {\n    if ((idx & 1) === 1) {\n        return stack[idx >> 1];\n    } else {\n        const val = slab[idx >> 1];\n\n    return val.obj;\n\n    }\n}\n\nexport function __wbindgen_object_clone_ref(idx) {\n    // If this object is on the stack promote it to the heap.\n    if ((idx & 1) === 1)\n        return addHeapObject(getObject(idx));\n\n    // Otherwise if the object is on the heap just bump the\n    // refcount and move on\n    const val = slab[idx >> 1];\n    val.cnt += 1;\n    return idx;\n}\n\nfunction dropRef(idx) {\n\n    let obj = slab[idx >> 1];\n\n    obj.cnt -= 1;\n    if (obj.cnt > 0)\n        return;\n\n    // If we hit 0 then free up our space in the slab\n    slab[idx >> 1] = slab_next;\n    slab_next = idx >> 1;\n}\n\nexport function __wbindgen_object_drop_ref(i) { dropRef(i); }\n\nexport function __wbindgen_string_new(p, l) {\n    return addHeapObject(getStringFromWasm(p, l));\n}\n\nexport function __wbindgen_number_new(i) { return addHeapObject(i); }\n\nexport function __wbindgen_number_get(n, invalid) {\n    let obj = getObject(n);\n    if (typeof(obj) === 'number')\n        return obj;\n    getUint8Memory()[invalid] = 1;\n    return 0;\n}\n\nexport function __wbindgen_undefined_new() { return addHeapObject(undefined); }\n\nexport function __wbindgen_null_new() {\n    return addHeapObject(null);\n}\n\nexport function __wbindgen_is_null(idx) {\n    return getObject(idx) === null ? 1 : 0;\n}\n\nexport function __wbindgen_is_undefined(idx) {\n    return getObject(idx) === undefined ? 1 : 0;\n}\n\nexport function __wbindgen_boolean_new(v) {\n    return addHeapObject(v === 1);\n}\n\nexport function __wbindgen_boolean_get(i) {\n    let v = getObject(i);\n    if (typeof(v) === 'boolean') {\n        return v ? 1 : 0;\n    } else {\n        return 2;\n    }\n}\n\nexport function __wbindgen_symbol_new(ptr, len) {\n    let a;\n    if (ptr === 0) {\n        a = Symbol();\n    } else {\n        a = Symbol(getStringFromWasm(ptr, len));\n    }\n    return addHeapObject(a);\n}\n\nexport function __wbindgen_is_symbol(i) {\n    return typeof(getObject(i)) === 'symbol' ? 1 : 0;\n}\n\nexport function __wbindgen_string_get(i, len_ptr) {\n    let obj = getObject(i);\n    if (typeof(obj) !== 'string')\n        return 0;\n    const [ptr, len] = passStringToWasm(obj);\n    getUint32Memory()[len_ptr / 4] = len;\n    return ptr;\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}